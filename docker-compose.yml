services:
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686" # UI
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`localhost`)"
#      - "traefik.http.routers.jaeger.rule=Host(`localhost`) && PathPrefix(`/jaeger`)"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"
#      - "traefik.http.middlewares.jaeger-stripprefix.stripprefix.prefixes=/jaeger"
#      - "traefik.http.routers.jaeger.middlewares=jaeger-stripprefix"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      internal_net:

  otel-collector:
    image: otel/opentelemetry-collector
    command: [ "--config=/etc/otel-config.yaml" ]
    volumes:
      - ./otel-config.yaml:/etc/otel-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Metrics
    depends_on:
      - jaeger
    networks:
      internal_net:

  traefik:
    image: traefik:v2.10
    container_name: traefik
    ports:
      - "80:80"  # Expose HTTP
      - "8080:8080"  # Traefik Dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
    depends_on:
      - jaeger
      - otel-collector
    networks:
      proxy_net:
      internal_net:

  redis-master:
    image: redis:7.2.7-alpine  # Versión específica y más ligera
    container_name: urs-redis-master
    ports:
      - "6379:6379"
    command: [
      "redis-server",
      "--bind", "0.0.0.0",
      "--appendonly", "yes",
      "--requirepass", "${REDIS_PASSWORD:-myStrongPassword}",
      "--databases", "${REDIS_DATABASES:-2}"
    ]
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-myStrongPassword}", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 3
    volumes:
      - redis_data:/data  # Data persistence
    networks:
      internal_net:

  redis-replica-1:
    image: redis:7.2.7-alpine
    container_name: urs-redis-replica-1
    command: [
      "redis-server",
      "--replicaof", "redis-master", "6379",
      "--masterauth", "${REDIS_PASSWORD:-myStrongPassword}",
      "--requirepass", "${REDIS_PASSWORD:-myStrongPassword}",
      "--databases", "${REDIS_DATABASES:-2}"
    ]
    depends_on:
      - redis-master
    networks:
      internal_net:

  redis-replica-2:
    image: redis:7.2.7-alpine
    container_name: urs-redis-replica-2
    command: [
      "redis-server",
      "--replicaof", "redis-master", "6379",
      "--masterauth", "${REDIS_PASSWORD:-myStrongPassword}",
      "--requirepass", "${REDIS_PASSWORD:-myStrongPassword}",
      "--databases", "${REDIS_DATABASES:-2}"
    ]
    depends_on:
      - redis-master
    networks:
      internal_net:

  redis-replica-3:
    image: redis:7.2.7-alpine
    container_name: urs-redis-replica-3
    command: [
      "redis-server",
      "--replicaof", "redis-master", "6379",
      "--masterauth", "${REDIS_PASSWORD:-myStrongPassword}",
      "--requirepass", "${REDIS_PASSWORD:-myStrongPassword}",
      "--databases", "${REDIS_DATABASES:-2}"
    ]
    depends_on:
      - redis-master
    networks:
      internal_net:

  redis-replica-4:
    image: redis:7.2.7-alpine
    container_name: urs-redis-replica-4
    command: [
      "redis-server",
      "--replicaof", "redis-master", "6379",
      "--masterauth", "${REDIS_PASSWORD:-myStrongPassword}",
      "--requirepass","${REDIS_PASSWORD:-myStrongPassword}",
      "--databases", "${REDIS_DATABASES:-2}"
    ]
    depends_on:
      - redis-master
    networks:
      internal_net:

  url-shortener:
    container_name: urs-go
    image: go_urls:dev
#    build:
#      context: .
#      dockerfile: Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.url-shortener.rule=Host(`localhost`) && PathPrefix(`/short`)"
      - "traefik.http.services.url-shortener.loadbalancer.server.port=8081"
    environment:
      - REDIS_HOST=redis-master:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-myStrongPassword}
      - REDIS_DB=${REDIS_DB:-1}
      - APP_PORT=8081
      - APP_CONTEXT=short
      - RELEASE=dev
    depends_on:
      redis-master:
        condition: service_healthy  # Espera a que Redis esté listo
    networks:
      internal_net:

volumes:
  redis_data:  # Volume for Redis persistence

networks:
  internal_net:
    internal: true
  proxy_net:
    driver:
      bridge  # Use the default bridge driver
